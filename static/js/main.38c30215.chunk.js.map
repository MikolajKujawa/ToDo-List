{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","console","log","_this$state","length","props","add","alert","maxDate","this","react_default","a","createElement","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","b","toLowerCase","activeTasks","map","components_Task","key","doneTasks","Fragment","fontSize","App","counter","deleteTask","Object","toConsumableArray","changeTaskStatus","forEach","getTime","addTask","prevState","concat","src_components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38c30215.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css'\r\n\r\nclass AddTask extends Component {\r\n    minDate = new Date().toISOString().slice(0,10);\r\n    state = { \r\n        text: '',\r\n        checked: false,\r\n        date: this.minDate\r\n     }\r\n\r\n     handleText = (e) => {\r\n         this.setState({\r\n            text: e.target.value\r\n         })\r\n     }\r\n\r\n     handleCheckbox = (e) => {\r\n        this.setState({\r\n           checked: e.target.checked\r\n        })\r\n    }\r\n\r\n     handleDate = (e) => {\r\n         this.setState({\r\n            date: e.target.value\r\n         })        \r\n     }\r\n\r\n     handleClick = () => {\r\n        console.log('dodaj')\r\n        const{text, checked, date} = this.state\r\n        if(text.length>2) {\r\n        const add = this.props.add(text, date, checked)\r\n            if(add) {\r\n                this.setState({\r\n                    text: '',\r\n                    checked: false,\r\n                    date: this.minDate\r\n                })\r\n            }\r\n        }\r\n        else{\r\n            alert('za krótka nazwa')\r\n        }\r\n     }\r\n\r\n    render() { \r\n        let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n        maxDate = maxDate + '-12-31';\r\n\r\n        return ( \r\n            <div className=\"form\">\r\n                <input type='text' placeholder=\"dodaj zadanie\" value={this.state.text} onChange={this.handleText}/>\r\n                <input type='checkbox' checked={this.state.checked} id='important' onChange={this.handleCheckbox}/>\r\n                <label htmlFor='important'> Priorytet</label>\r\n                <br/>\r\n                <label htmlFor='date'>Do kiedy zrobić</label>\r\n                <input type='date' value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate}></input>\r\n                <br/>\r\n                <button onClick={this.handleClick}>Dodaj</button>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default AddTask;","import React from 'react';\r\n\r\nconst Task = (props) => {\r\n    const style = {\r\n        color: 'red',\r\n    }\r\n    const {text, date, id, active, important, finishDate} = props.task;\r\n    if(active){\r\n        return ( \r\n            <div>\r\n                <p>\r\n                    <strong style={important ? style : null}>{text}</strong> - do <span>{date} </span> \r\n                    <button onClick={() => props.change(id)}>Zostało zrobione</button>\r\n                    <button onClick={() => props.delete(id)}>X</button>\r\n                </p>\r\n                \r\n            </div>\r\n        );\r\n    } \r\n    else{\r\n        const finish = new Date(finishDate).toLocaleString()\r\n        return(\r\n           <div>\r\n               <p>\r\n                    <strong>{text}</strong><em> (zrobić do {date}</em>\r\n                    <br/> \r\n                    - potwierdzenie wykonania<span> {finish}</span>\r\n                    <button onClick={() => props.delete(id)}>X</button>\r\n                </p>\r\n           </div> \r\n        )\r\n    }\r\n}\r\n \r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\n\r\nconst TaskList = (props) => {\r\n    const active = props.tasks.filter(task => task.active);\r\n    const done = props.tasks.filter(task => !task.active);\r\n\r\n    if (done.length >= 2) {\r\n        done.sort((a, b) => {\r\n            if (a.finishDate < b.finishDate) {\r\n                return 1\r\n            }\r\n            if (a.finishDate > b.finishDate) {\r\n                return -1\r\n            }\r\n            return 0\r\n        })\r\n    }\r\n\r\n    if (active.length >=2) {\r\n        active.sort((a, b) => {\r\n\r\n            a = a.text.toLowerCase()\r\n            b = b.text.toLowerCase()\r\n\r\n            if(a < b) return -1;\r\n            if(a > b) return 1\r\n            return 0\r\n        })\r\n    }\r\n\r\n    const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change}/>)\r\n    const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change}/>)\r\n    return (\r\n        <> \r\n            <div className=\"active\">\r\n                <h1>Zadania do zrobienia</h1>\r\n                {activeTasks.length > 0 ? activeTasks : <p>brak zadań</p>}\r\n            </div>\r\n            <hr/>\r\n            <div className='done'>\r\n                <h3>Zadania zrobione <em>({done.length})</em></h3>\r\n                {done.length > 3 && <span style={{fontSize: 10}}>Wyświetlone są 3 ostatnie elementy</span>}\r\n                {doneTasks.slice(0,3)}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n \r\nexport default TaskList;","import React, { Component } from 'react';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList'\nimport './App.css';\n\nclass App extends Component {\n  counter = 5\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: 'zagrać wreszcie w Cyberpunk',\n        date: '2018-02-15',\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 1,\n        text: 'zrobić zakupy',\n        date: '2019-02-18',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 2,\n        text: 'kupić telefon',\n        date: '2020-12-28',\n        important: true,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 3,\n        text: 'pojechać na wakacje',\n        date: '2019-06-08',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n      {\n        id: 4,\n        text: 'kupić kwiaty',\n        date: '2020-10-21',\n        important: false,\n        active: true,\n        finishDate: null,\n      },\n    ]\n  }\n\n  deleteTask = (id) => {\n    console.log(\"delete elementu o id \" + id);\n    /*const tasks = [...this.state.tasks];\n    const index = tasks.findIndex(task => task.id === id);\n    tasks.splice(index, 1);\n\n    this.setState({\n      tasks\n    })*/\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id)\n    this.setState({\n      tasks\n    })\n  }\n\n  changeTaskStatus = (id) => {\n    console.log(\"change w stanie elementu o id \" + id);\n    const tasks = [...this.state.tasks];\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime()\n      }\n    })\n    this.setState({\n      tasks\n    })\n  }\n\n  addTask = (text, date, important) => {\n    //console.log('dodany obiekt');\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important,\n      active: true,\n      finishDate: null,\n    }\n    console.log(task, this.counter)\n    this.counter++\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }))\n    return true\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ToDo App</h1>\n        <AddTask add={this.addTask}/>\n        <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}